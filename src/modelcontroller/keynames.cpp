#include "keynames.h"

const char* KeyName::Architecture{"architecture"};
const char* KeyName::BlackBox{"blackbox"};
const char* KeyName::Class{"class"};
const char* KeyName::ClockFrequency{"clock_freq"};
const char* KeyName::Code{"code"};
const char* KeyName::Column{"column"};
const char* KeyName::ColumnCount{"column_count"};
const char* KeyName::Comment{"comment"};
const char* KeyName::CppVarType{"cpp_vartype"};
const char* KeyName::Database{"database"};
const char* KeyName::DdsDomainID{"dds_domain_id"};
const char* KeyName::Description{"description"};
const char* KeyName::EditableKey{"editable_key"};
const char* KeyName::Frequency{"frequency"};
const char* KeyName::FunctionName{"function_name"};
const char* KeyName::HeaderLocation{"header_location"};
const char* KeyName::Height{"height"};
const char* KeyName::ID{"ID"};
const char* KeyName::Icon{"icon"};
const char* KeyName::IconPrefix{"icon_prefix"};
const char* KeyName::Index{"index"};
const char* KeyName::InnerType{"inner_type"};
const char* KeyName::InterfaceName{"interface_name"};
const char* KeyName::IpAddress{"ip_address"};
const char* KeyName::IsAvailable{"is_available"};
const char* KeyName::IsDocker{"is_docker"};
const char* KeyName::IsExpanded{"isExpanded"};
const char* KeyName::IsGenericParam{"is_generic_param"};
const char* KeyName::IsGenericParamSrc{"is_generic_param_src"};
const char* KeyName::IsLateJoiner{"is_late_joiner"};
const char* KeyName::IsOptionalParam{"is_optional_param"};
const char* KeyName::IsVariadic{"is_variadic"};
const char* KeyName::IsWorker{"is_worker"};
const char* KeyName::Key{"key"};
const char* KeyName::Kind{"kind"};
const char* KeyName::Label{"label"};
const char* KeyName::MedeaVersion{"medea_version"};
const char* KeyName::MemorySize{"memory_size"};
const char* KeyName::Middleware{"middleware"};
const char* KeyName::Mode{"mode"};
const char* KeyName::Namespace{"namespace"};
const char* KeyName::Operation{"operation"};
const char* KeyName::OS{"os"};
const char* KeyName::OsVersion{"os_version"};
const char* KeyName::OuterType{"outer_type"};
const char* KeyName::PrimitiveType{"primitive_type"};
const char* KeyName::ProcessesToLog{"processes_to_log"};
const char* KeyName::QosDdsAccessScope{"qos_dds_access_scope"};
const char* KeyName::QosDdsAutoDisposeUnregisteredInstances{"qos_dds_autodispose_unregistered_instances"};
const char* KeyName::QosDdsAutoEnableCreatedEntities{"qos_dds_autoenable_created_entities"};
const char* KeyName::QosDdsAutoPurgeDisposedSamplesDelaySec{"qos_dds_autopurge_disposed_samples_delay_sec"};
const char* KeyName::QosDdsAutoPurgeDisposedSamplesDelayNanoSec{"qos_dds_autopurge_disposed_samples_delay_nanosec"};
const char* KeyName::QosDdsAutoPurgeNoWriterSamplesDelaySec{"qos_dds_autopurge_nowriter_samples_delay_sec"};
const char* KeyName::QosDdsAutoPurgeNoWriterSamplesDelayNanoSec{"qos_dds_autopurge_nowriter_samples_delay_nanosec"};
const char* KeyName::QosDdsCoherentAccess{"qos_dds_coherent_access"};
const char* KeyName::QosDdsDepth{"qos_dds_depth"};
const char* KeyName::QosDdsDurationSec{"qos_dds_duration_sec"};
const char* KeyName::QosDdsDurationNanoSec{"qos_dds_duration_nanosec"};
const char* KeyName::QosDdsHistoryDepth{"qos_dds_history_depth"};
const char* KeyName::QosDdsHistoryKind{"qos_dds_history_kind"};
const char* KeyName::QosDdsIntValue{"qos_dds_int_value"};
const char* KeyName::QosDdsKind{"qos_dds_kind"};
const char* KeyName::QosDdsLeaseDurationSec{"qos_dds_lease_duration_sec"};
const char* KeyName::QosDdsLeaseDurationNanoSec{"qos_dds_lease_duration_nanosec"};
const char* KeyName::QosDdsMaxBlockingTimeSec{"qos_dds_max_blocking_time_sec"};
const char* KeyName::QosDdsMaxBlockingTimeNanoSec{"qos_dds_max_blocking_time_nanosec"};
const char* KeyName::QosDdsMaxInstances{"qos_dds_max_instances"};
const char* KeyName::QosDdsMaxSamples{"qos_dds_max_samples"};
const char* KeyName::QosDdsMaxSamplesPerInstance{"qos_dds_max_samples_per_instance"};
const char* KeyName::QosDdsMinSeparationSec{"qos_dds_minimum_separation_sec"};
const char* KeyName::QosDdsMinSeparationNanoSec{"qos_dds_minimum_separation_nanosec"};
const char* KeyName::QosDdsName{"qos_dds_name"};
const char* KeyName::QosDdsOrderedAccess{"qos_dds_ordered_access"};
const char* KeyName::QosDdsPeriodSec{"qos_dds_period_sec"};
const char* KeyName::QosDdsPeriodNanoSec{"qos_dds_period_nanosec"};
const char* KeyName::QosDdsServiceCleanupDelaySec{"qos_dds_service_cleanup_delay_sec"};
const char* KeyName::QosDdsServiceCleanupDelayNanoSec{"qos_dds_service_cleanup_delay_nanosec"};
const char* KeyName::QosDdsStrValue{"qos_dds_str_value"};
const char* KeyName::QpidBrokerAddress{"qpid_broker_address"};
const char* KeyName::ReadOnly{"readOnly"};

// NOTE - "replicate_count" has been replaced with "replicate_value"
// TODO - Need to provide a translation/transform from the old key to the new one
const char* KeyName::ReplicateCount{"replicate_count"};
const char* KeyName::ReplicateValue{"replicate_value"};

const char* KeyName::Row{"row"};
const char* KeyName::TaoNamingServiceEndpoint{"tao_naming_service_endpoint"};
const char* KeyName::TaoServerName{"tao_server_name"};
const char* KeyName::TaoServerKind{"tao_server_kind"};
const char* KeyName::TopicName{"topic_name"};
const char* KeyName::Type{"type"};
const char* KeyName::Url{"url"};
const char* KeyName::UUID{"uuid"};
const char* KeyName::Value{"value"};
const char* KeyName::Vendor{"vendor"};
const char* KeyName::Version{"version"};
const char* KeyName::Width{"width"};
const char* KeyName::Worker{"worker"};
const char* KeyName::WorkerID{"workerID"};
const char* KeyName::X{"x"};
const char* KeyName::Y{"y"};
const char* KeyName::ZmqPublisherAddress{"zmq_publisher_address"};
const char* KeyName::ZmqServerAddress{"zmq_server_address"};

const char* KeyName::TriggerType{"trigger_type"};
const char* KeyName::Condition{"condition"};
const char* KeyName::SingleActivation{"single_activation"};
const char* KeyName::WaitPeriod{"wait_period (ms)"};
const char* KeyName::ContainerReference{"Container_reference"};