syntax="proto3";

package NodeManager;
message ControlMessage{
    enum Type{
        NO_TYPE = 0;
        STARTUP = 1;        //Construct the NodeContainer; Setup all ports and topics for ALL Components/Eventports
        TEARDOWN = 2;       //Destruct the NodeContainer; Implicitly tears down all components and Eventports.
        CONFIGURE = 3;
        ACTIVATE = 4;       //Start executing a Component, Requires Startup first
        PASSIVATE = 5;      //Stop executing a Component, Requires Startup and Passivate
        TERMINATE = 6;      //Terminate Node Manager on Slaves
        SET_ATTRIBUTE = 7;  //Set the Attribute of Components, requires Startup
    }

    Type type = 1;
    double time_stamp = 2;
    string host_name = 3;
    repeated Node nodes = 4;
    string experiment_id = 5;
    repeated Attribute attributes = 6;
}

message EnvironmentMessage{
    enum Type{
        NO_TYPE = 0;
        ERROR_RESPONSE = 1;
        ADD_DEPLOYMENT = 2;
        GET_DEPLOYMENT_INFO = 3;
        REMOVE_DEPLOYMENT = 4;
        ADD_ENDPOINT = 5;
        REMOVE_ENDPOINT = 6;
        ADD_COMPONENT = 7;
        REMOVE_COMPONENT = 8;
        HEARTBEAT = 9;
        HEARTBEAT_ACK = 10;
        SUCCESS = 11;
        NODE_QUERY = 12;
        UPDATE_DEPLOYMENT = 13;
        LOGAN_QUERY = 14;
        LOGAN_RESPONSE = 15;
        ADD_LOGAN_CLIENT = 16;
    }

    Type type = 1;
    string update_endpoint = 2;

    string experiment_id = 3;
    ControlMessage control_message = 4;
    Logger logger = 5;

    repeated string error_messages = 6;

}

message Info{
    string name = 1;
    string id = 2;
    string type = 3;
}

message Node{
    enum NodeType{
        NO_NODE_TYPE = 0;
        HARDWARE_NODE = 1;
        HARDWARE_CLUSTER = 2;
        DOCKER_CLUSTER = 3;
        DOCKER_NODE = 4;
        OPEN_CL = 5;
        OPENSTACK = 6;
    }
    Info info = 1;
    NodeType type = 2;
    repeated Node nodes = 3;
    repeated Component components = 4;
    repeated Attribute attributes = 5;

}

message Component{
    Info info = 1;
    repeated EventPort ports = 2;
    repeated Attribute attributes = 3;
    repeated Worker workers = 4;
    uint32 replicate_id = 5;
}

message EventPort{
    enum Kind{
        IN_PORT = 0;
        OUT_PORT = 1;
        PERIODIC_PORT = 2;
    }

    enum Middleware{
        NONE = 0;
        ZMQ = 1;
        RTI = 2;
        OSPL = 3;
        QPID = 4;
        TAO = 5;
    }

    enum Visibility{
        UNSET_VISIBILITY = 0;
        PUBLIC = 1;
        PRIVATE = 2;
    }

    Info info = 1;
    Kind kind = 2;
    Middleware middleware = 3;
    repeated Attribute attributes = 4;
    string namespace_name = 5;
    string port_guid = 6;
    repeated string connected_ports = 7;
    Visibility visibility = 8;
}

message Worker{
    Info info = 1;
    repeated Attribute attributes = 2;
}

message Attribute{
    enum Kind{
        STRING = 0;
        INTEGER = 1;
        CHARACTER = 2;
        BOOLEAN = 3;
        DOUBLE = 4;
        FLOAT = 5;
        STRINGLIST = 6;
    }
    Info info = 1;
    Kind kind = 2;
    repeated string s = 3;
    int64 i = 4;
    double d = 5;
}

message Logger{
    enum Mode{
        OFF = 0;
        LIVE = 1;
        CACHED = 2;
    }
    
    string publisher_address = 1;
    string publisher_port = 2;
    Mode mode = 3;
}

message Startup{
    string host_name = 1;
    string publisher_address = 2;
    Logger logger = 3;
    ControlMessage configure = 4;
}

message StartupResponse{
    string host_name = 1;
    bool success = 2;
    repeated string error_codes = 3;
}
