// This method collects a list of Node names from the current Jenkins instance
@NonCPS
def nodeNames() {
  return jenkins.model.Jenkins.instance.nodes.collect { node -> node.name }
}

def getLabels(String name){
    def computer = Jenkins.getInstance().getComputer(name)
    def node = computer.getNode()
    if(computer.isOnline()){
        return node.getLabelString()
    }
    return ""
}

def names = nodeNames()
//filter nodes
def filtered_names = []
for(n in names){
    if(getLabels(n).contains("re")){
        filtered_names << n
        print("Got Node: " + n)
    }
}

stage('Checkout'){
    def builders = [:]
    for(n in filtered_names){
        def node_name = n
        builders[node_name] = {
            node(node_name){
                dir("${RE_PATH}"){
                    checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'SubmoduleOption', disableSubmodules: false, parentCredentials: true, recursiveSubmodules: false, reference: '', trackingSubmodules: false]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: "${GIT_CREDENTIAL_ID}", url: 'https://github.com/cdit-ma/re.git']]])    
                }
            }
        }
    }
    parallel builders
}

stage('Build'){
    def builders = [:]
    for(n in filtered_names){ 
        def node_name = n
        builders[node_name] = {  
            node(node_name){
                withEnv(['CMAKE_MODULE_PATH=' + pwd() + '/re/cmake_modules']) {
                  dir("${RE_PATH}" + '/build'){
                      sh 'cmake ..'
                      sh 'make -j6'
                  }
                }
            }
        }
    }
    parallel builders
}
