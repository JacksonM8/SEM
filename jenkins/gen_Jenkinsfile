

// This method collects a list of Node names from the current Jenkins instance
@NonCPS
def nodeNames() {
  return jenkins.model.Jenkins.instance.nodes.collect { node -> node.name }
}

def getLabels(String name){
    def computer = Jenkins.getInstance().getComputer(name)
    def node = computer.getNode()
    if(computer.isOnline()){
        return node.getLabelString()
    }
    return ""
}

def runScript(String script){
    if(isUnix()){
        sh script
    }
    else{
        //TODO: do windows things here
    }
}

def masterNode = "${MASTER_NODE}"
def buildDir = "gen"
def buildArchiveDir = "build" + env.BUILD_ID
def loganServers = [:]
def loganClients = [:]
def reManagers = [:]

node(masterNode){
    def workspacePath = pwd()
    def reGenPath = "${RE_GEN_PATH}"
    def saxonPath = reGenPath

    def file =  reGenPath + '/' + "${model_graphml}"
    def middlewareString = ' middlewares=zmq,proto,qpid,ospl,rti'
    def fileString = ' -s:' + file
    def jarString = 'java -jar '  + saxonPath + '/saxon.jar -xsl:' + reGenPath
    
    //Parse graphml model and generate deployment plan
    stage('Build Deployment Plan'){
        //Generate deployment json
        def executionParser = "${RE_PATH}" + '/bin/re_execution_parser ' + file
        def json = sh(returnStdout: true, script: executionParser)
        print(json)

        //Parse json
        def deploymentJson = readJSON text: json




        //Iterate through deployed nodes and add to deployment plan
        for(n in deploymentJson){
            def node_name = n.key
            def node = deploymentJson[node_name]
            
            def reArgs = ""
            print(node_name)
            if(node["re_node_manager"] != null){
                print("re_node_manager")
                for(arg in node["re_node_manager"]){
                    print("arg")
                    reArgs +=  " --" + arg.key + " " + arg.value
                }
                if(node["re_node_manager"]["master"] != null){
                    //TODO: parse this
                    reArgs += " -t 60"
                }
                if(node["re_node_manager"]["slave"] != null){
                    reArgs += " -l ."
                }
            }

            print("TESTY1")

            //Add execution commands to our deployment plan
            reManagers[node_name] = {
                node(node_name){
                    dir(buildDir + "/lib"){
                        print("${RE_PATH}" + '/bin/re_node_manager ' + reArgs)
                        //runScript(executionCommand)
                    }
                }
            }
        }
    }
    print("TESTY")

    //Checkout transforms
    dir(reGenPath){
        if("${checkout}" == 'true'){
            stage('Checkout Transforms'){
                checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'SubmoduleOption', disableSubmodules: false, parentCredentials: true, recursiveSubmodules: false, reference: '', trackingSubmodules: false]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'f61aee32-b55a-4a7a-bef4-6372ed9fc94f', url: 'https://github.com/cdit-ma/re_gen.git']]])
            }
        }
    }

    def buildPath = workspacePath + "/" + buildDir
    
    //Generate C++ code
    dir(buildPath){
        stage('C++ Generation'){
            def typeGenCommand = jarString + '/g2datatypes.xsl' + fileString + middlewareString
            runScript(typeGenCommand)
            def componentGenCommand = jarString + '/g2components.xsl' + fileString + middlewareString
            runScript(componentGenCommand)
        }
    }

    //Store an archive of generated C++ files
    stage('Archive'){
        dir(workspacePath){
            // Stash generated cpp files.
            stash includes: buildDir + '/**', name: 'codeGen'
        }
        dir(workspacePath + "/" + buildArchiveDir){
            unstash 'codeGen'
        }
    }
}

def names = nodeNames()
//filter nodes
def filtered_names = []
for(n in names){
    if(getLabels(n).contains("GEN")){
        filtered_names << n
        print("Got Node: " + n)
    }
}

//go to all nodes and build generated code in parallel
stage('Compile C++ Code'){
    def builders = [:]
    for(n in filtered_names){
        def node_name = n
        builders[node_name] = {
            node(node_name){
                unstash 'codeGen'
                dir(buildDir + "/build"){
                    sh 'cmake ..'
                    sh 'make'
                }
            }
        }
    }
    //TODO:uncomment this
    //parallel builders
}


stage('Execute Model'){
    parallel builders
}
