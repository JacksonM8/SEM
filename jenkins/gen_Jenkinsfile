

// This method collects a list of Node names from the current Jenkins instance
@NonCPS
def nodeNames() {
  return jenkins.model.Jenkins.instance.nodes.collect { node -> node.name }
}

def getLabels(String name){
    def computer = Jenkins.getInstance().getComputer(name)
    def node = computer.getNode()
    if(computer.isOnline()){
        return node.getLabelString()
    }
    return ""
}

def runScript(String script){
    if(isUnix()){
        sh script
    }
    else{
        //TODO: do windows things here
    }
}

def masterNode = "${MASTER_NODE}"
def buildDir = "gen"
def buildArchiveDir = "build" + env.BUILD_ID
def loganServers = [:]
def loganClients = [:]
def reManagers = [:]

node(masterNode){
    def workspacePath = pwd()
    def reGenPath = "${RE_GEN_PATH}"
    def saxonPath = reGenPath

    def file =  reGenPath + '/' + "${model_graphml}"
    def middlewareString = ' middlewares=zmq,proto,qpid,ospl,rti'
    def fileString = ' -s:' + file
    def jarString = 'java -jar '  + saxonPath + '/saxon.jar -xsl:' + reGenPath
    
    //Parse graphml model and generate deployment plan
    stage('Build Deployment Plan'){
        //Generate deployment json
        def executionParser = "${RE_PATH}" + '/bin/re_execution_parser ' + file
        def json = sh(returnStdout: true, script: executionParser)
        print(json)

        //Parse json
        def deploymentJson = readJSON text: json




        //Iterate through deployed nodes and add to deployment plan
        for(n in deploymentJson){
            
            def node_name = n.key
            print(node_name)
            def node = deploymentJson[node_name]
            
            def reArgs = ""
            print(node_name)
            if(node["re_node_manager"]){
                print("re_node_manager")
                for(arg in node["re_node_manager"]){
                    print("arg")
                    reArgs +=  " --" + arg.key + " " + arg.value
                }
                if(node["re_node_manager"]["master"]){
                    //TODO: parse this
                    reArgs += " -t 60"
                }
                if(node["re_node_manager"]["slave"]){
                    reArgs += " -l ."
                }
            }

            print("RE_ARGS" + reArgs)

            //Add execution commands to our deployment plan
            //reManagers[node_name] = {
            node(node_name){
                dir(buildDir + "/lib"){
                    print("${RE_PATH}" + '/bin/re_node_manager ' + reArgs)
                    //runScript(executionCommand)
                }
            }
            //}
        }
        print("Finished Stage")
    }
}