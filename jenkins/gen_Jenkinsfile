

// This method collects a list of Node names from the current Jenkins instance
@NonCPS
def nodeNames() {
  return jenkins.model.Jenkins.instance.nodes.collect { node -> node.name }
}

def getLabels(String name){
    def computer = Jenkins.getInstance().getComputer(name)
    def node = computer.getNode()
    if(computer.isOnline()){
        return node.getLabelString()
    }
    return ""
}

def runScript(String script){
    if(isUnix()){
        sh script
    }
    else{
        //TODO: do windows things here
    }
}




def masterNode = "${MASTER_NODE}"
def buildDir = "gen"
def buildArchiveDir = "build" + env.BUILD_ID
def loganServers = [:]
def loganClients = [:]
def reManagers = [:]

def jDeployment = "";

def file = "model.graphml"
node(){
    writeFile file: file, text: "${model}"
    print(pwd())
    stash includes: file, name: 'model'
}



node(masterNode){
    unstash 'model'
    def workspacePath = pwd()
    def reGenPath = "${RE_GEN_PATH}"
    def saxonPath = reGenPath

    
    def middlewareString = ' middlewares=zmq,proto,qpid,ospl,rti'
    def fileString = ' -s:' + file
    def jarString = 'java -jar '  + saxonPath + '/saxon.jar -xsl:' + reGenPath
    print(file)
    //Parse graphml model and generate deployment plan
    stage('Build Deployment Plan'){
        //Generate deployment json
        def executionParser = "${RE_PATH}" + '/bin/re_execution_parser ' + file
        def json = sh(returnStdout: true, script: executionParser)
        print(json)

        //Parse json
        jDeployment = readJSON text: json
    }
}

//Itterate through all nodes
def node_keys = jDeployment.keySet()// as List
for(def i = 0; i < node_keys.size(); i++){
    def nodeName = node_keys[i];
    def jNode = jDeployment[nodeName];
    
    def reArgs = "";
    if(jNode["re_node_manager"]){
        for(arg in jNode["re_node_manager"]){
            reArgs +=  " --" + arg.key + " " + arg.value;
        }
        if(jNode["re_node_manager"]["master"]){
            //TODO: parse this
            reArgs += " -t 60";
        }
        if(jNode["re_node_manager"]["slave"]){
            reArgs += " -l .";
        }
    }

    reManagers[node_name] = {
        node(node_name){
            print(nodeName + " : " + "${RE_PATH}" + reArgs);
        }
    }
}

stage("Execute"){
     parallel reManagers
}