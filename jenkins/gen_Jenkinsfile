

// This method collects a list of Node names from the current Jenkins instance
@NonCPS
def nodeNames() {
  return jenkins.model.Jenkins.instance.nodes.collect { node -> node.name }
}

def getLabels(String name){
    def computer = Jenkins.getInstance().getComputer(name)
    def node = computer.getNode()
    if(computer.isOnline()){
        return node.getLabelString()
    }
    return ""
}

def runScript(String script){
    if(isUnix()){
        sh script
    }
    else{
        //TODO: do windows things here
    }
}




def masterNode = "${MASTER_NODE}"
def buildDir = "gen"
def buildArchiveDir = "build" + env.BUILD_ID
def loganServers = [:]
def loganClients = [:]
def reManagers = [:]
def compileCode = [:]

def jDeployment = "";

def file = "model.graphml"
node(){
    writeFile file: file, text: "${model}"
    print(pwd())
    stash includes: file, name: 'model'
}



node(masterNode){
    unstash 'model'
    def workspacePath = pwd()
    def reGenPath = "${RE_GEN_PATH}"
    def saxonPath = reGenPath

    
    def middlewareString = ' middlewares=zmq,proto,qpid,ospl,rti'
    def fileString = ' -s:' + file
    def jarString = 'java -jar '  + saxonPath + '/saxon.jar -xsl:' + reGenPath
    print(file)
    //Parse graphml model and generate deployment plan
    stage('Build Deployment Plan'){
        //Generate deployment json
        def executionParser = "${RE_PATH}" + '/bin/re_execution_parser ' + file
        def json = sh(returnStdout: true, script: executionParser)
        print(json)

        //Parse json
        jDeployment = readJSON text: json
    }
    
    //Checkout transforms
    dir(reGenPath){
        if("${checkout}" == 'true'){
            stage('Checkout Transforms'){
                checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'SubmoduleOption', disableSubmodules: false, parentCredentials: true, recursiveSubmodules: false, reference: '', trackingSubmodules: false]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'f61aee32-b55a-4a7a-bef4-6372ed9fc94f', url: 'https://github.com/cdit-ma/re_gen.git']]])
            }
        }
    }

    def buildPath = workspacePath + "/" + buildDir
    
    //Generate C++ code
    dir(buildPath){
        unstash 'model'
        stage('C++ Generation'){
            def typeGenCommand = jarString + '/g2datatypes.xsl' + fileString + middlewareString
            runScript(typeGenCommand)
            def componentGenCommand = jarString + '/g2components.xsl' + fileString + middlewareString
            runScript(componentGenCommand)
        }
    }

    //Store an archive of generated C++ files
    stage('Archive'){
        dir(workspacePath){
            // Stash generated cpp files.
            stash includes: buildDir + '/**', name: 'codeGen'
        }
        dir(workspacePath + "/" + buildArchiveDir){
            unstash 'codeGen'
        }
    }
}

//Itterate through all nodes
def nodeKeys = jDeployment.keySet() as List;
for(def i = 0; i < nodeKeys.size(); i++){
    def nodeName = nodeKeys[i];
    def jNode = jDeployment[nodeName];
    
    
    if(jNode["re_node_manager"]){
        def args = "";

        for(arg in jNode["re_node_manager"]){
            args +=  " --" + arg.key + " " + arg.value;
        }
        if(jNode["re_node_manager"]["master"]){
            //TODO: parse this
            args += " -t 60";
            args += " -d " + file
        }
        if(jNode["re_node_manager"]["slave"]){
            args += " -l .";
        }

        //Update the map to include the compile
        compileCode[nodeName] = {
            node(nodeName){
                unstash 'codeGen'
                dir(buildDir + "/build"){
                    sh 'cmake ..'
                    sh 'make'
                }
            }
        }

        //Update the map to include the launch instructions for re_node_manager
        reManagers[nodeName] = {
            node(nodeName){
                unstash 'model'
                def command = "${RE_PATH}" + "/bin/re_node_manager" + args
                print(nodeName + " : " + command);
                sh command;
            }
        }
    }

    if(jNode["logan_server"]){
        def args = "";

        for(arg in jNode["logan_server"]){
            args +=  " --" + arg.key + " " + arg.value;
        }

        //Update the map to include the launch instructions for logan_server
        loganServers[nodeName] = {
            node(nodeName){
                print(nodeName + " : " + "${LOGAN_PATH}" + "/bin/logan_server" + args);
            }
        }
    }

    if(jNode["logan_client"]){
        def args = "";

        for(arg in jNode["logan_client"]){
            args +=  " --" + arg.key + " " + arg.value;
        }

        //Update the map to include the launch instructions for logan_client
        loganClients[nodeName] = {
            node(nodeName){
                print(nodeName + " : " + "${RE_PATH}" + "/bin/logan_client" + args);
            }
        }
    }

    
}

stage("Start logan"){
    parallel loganServers
    parallel loganClients
}

stage("Compiling C++"){
    parallel compileCode
}

stage("Start re_node_manager"){
    parallel reManagers
}
