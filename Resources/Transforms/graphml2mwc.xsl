<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0" 
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:gml="http://graphml.graphdrawing.org/xmlns"

	xmlns:exsl="http://exslt.org/common"
	xmlns:xalan="http://xml.apache.org/xslt"	
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://www.omg.org/Deployment Deployment.xsd"
	xmlns:redirect = "org.apache. xalan.xslt.extensions.Redirect"
	
	exclude-result-prefixes="gml exsl xalan">
		
    <xsl:output method="text" 
		omit-xml-declaration="yes"
        indent="no" />
	<xsl:strip-space elements="*" />
	
    <!--
        Purpose:

        This template will convert the .graphml project to a mwc file. 
		The driving program must select which mpc files to include for a given deployment. 
		That is we receive a comma delimited list of all "<component>Impl.mpc" and "<idlfile>.mpc" 
		for the model/project or required deployment.
    -->
	
	<!-- Runtime parameters -->
	<xsl:param name="FileList"></xsl:param>
	
	<!-- Assign default data keys as used by yEd 3.12.2 -->
	<xsl:include href="graphmlKeyVariables.xsl" />
	
	<!-- Assign global variables for deployment       -->
	<xsl:variable name="implSuffix" select="'_impl'" />
	<xsl:variable name="svntSuffix" select="'_svnt'" />
	<xsl:variable name="ImplSuffix" select="'Impl'" />
	<xsl:variable name="ServantSuffix" select="'Servant'" />
	<xsl:variable name="stubSuffix" select="'_stub'" />
	<xsl:variable name="skelSuffix" select="'_skel'" />
	<xsl:variable name="execSuffix" select="'_exec'" />
	<xsl:variable name="eidlSuffix" select="'_EIDL_Gen'" />

	<!-- apply all templates starting from the root -->
    <xsl:template match="/">
		<!-- Assign the transform node key ids from existing keys -->
		<xsl:variable name="transformNodeLabelKey">
			<xsl:call-template name="findNodeKey">
				<xsl:with-param name="attrName" select="'label'" />
				<xsl:with-param name="defaultId" select="$nodeLabelKey" />
			</xsl:call-template>	
		</xsl:variable>
		
		<xsl:variable name="transformNodeKindKey">
			<xsl:call-template name="findNodeKey">
				<xsl:with-param name="attrName" select="'kind'" />
				<xsl:with-param name="defaultId" select="$nodeKindKey" />
			</xsl:call-template>	
		</xsl:variable>	

		<xsl:variable name="projectName" select="/descendant::*/gml:node/gml:data[@key=$transformNodeKindKey][text() = 'Model']/../gml:data[@key=$transformNodeLabelKey]/text()" />
		<xsl:variable name="componentNodes" select="/descendant::*/gml:node/gml:data[@key=$transformNodeKindKey][text() = 'Component']/..
												  | /descendant::*/gml:node/gml:data[@key=$transformNodeKindKey][text() = 'BlackBox']/.." />
		<xsl:variable name="fileNodes" select="/descendant::*/gml:node/gml:data[@key=$transformNodeKindKey][text() = 'IDL']/.." />

		<!-- Workspace_Begin -->
		<xsl:value-of select=       "'//===================================================================&#xA;'"/>
		<xsl:value-of select=       "'// Makefile, Project, and Workspace Creator File&#xA;'"/>
		<xsl:value-of select=       "'//&#xA;'"/>
		<xsl:value-of select=       "'// This file was generated by&#xA;'"/>
		<xsl:value-of select=       "'// graphml2mwc.xsl&#xA;'"/>
		<xsl:value-of select=       "'//&#xA;'"/>
		<xsl:value-of select=       "'// Please do not modify the contents of this file under&#xA;'"/>
		<xsl:value-of select=       "'// any circumstances. Doing so can result in failure to&#xA;'"/>
		<xsl:value-of select=       "'// successfully build parts of (or the entire) workspace.&#xA;'"/>
		<xsl:value-of select=       "'//===================================================================&#xA;&#xA;'"/>
		<xsl:value-of select="concat('workspace (', $projectName, ') {&#xA;')"/>
		<xsl:value-of select=       "'  // -- initialize the includes for the project.&#xA;'"/>
		<xsl:value-of select=       "'  cmdline += -include $CUTS_ROOT/MPC/config \&#xA;'"/>
		<xsl:value-of select=       "'             -feature_file $CUTS_ROOT/default.features \&#xA;'"/>
		<xsl:value-of select=       "'             -relative PROJECT_ROOT=&#xA;&#xA;'"/>

		<!-- Project_Include -->	
		<xsl:choose>
		<xsl:when test="not($FileList = '')">
			<!-- find requested Component node or IDL file mpc file name from csv parameter FileList -->
			<xsl:variable name="delim" select="','" />
			<xsl:call-template name="splitListOutput">
				<xsl:with-param name="pText" select="$FileList"/>
				<xsl:with-param name="delim" select="$delim" />
			</xsl:call-template> 
		</xsl:when>
		<xsl:otherwise>
			<!-- if FileList not provided, default to produce mwc for all components and idl files in model/project -->
			<xsl:for-each select="$componentNodes" >
				<xsl:call-template name="Project_Include_Impl">
					<xsl:with-param name="node" select="." />
					<xsl:with-param name="transformNodeKindKey" select="$transformNodeKindKey"/>
					<xsl:with-param name="transformNodeLabelKey" select="$transformNodeLabelKey"/>
				</xsl:call-template>	
			</xsl:for-each>

			<xsl:for-each select="$fileNodes" >
				<xsl:call-template name="Project_Include_IDL">
					<xsl:with-param name="node" select="." />
					<xsl:with-param name="transformNodeKindKey" select="$transformNodeKindKey"/>
					<xsl:with-param name="transformNodeLabelKey" select="$transformNodeLabelKey"/>
				</xsl:call-template>	
			</xsl:for-each>
		</xsl:otherwise>
		</xsl:choose>
		
		<!-- Workspace_End -->
		<xsl:value-of select=       "'}&#xA;&#xA;'"/>
		<xsl:value-of select=       "'//end of auto-generated workspace&#xA;&#xA;'"/>
		
    </xsl:template>
		
	<!-- Project_Include_Impl -->
	<xsl:template name="Project_Include_Impl">
		<xsl:param name="node" />
		<xsl:param name="transformNodeKindKey" />
		<xsl:param name="transformNodeLabelKey" />
		
		<!-- Workspace_Project_Include -->
		<xsl:variable name="nodeName" select="./gml:data[@key=$transformNodeLabelKey]/text()" />
		<xsl:value-of select="concat('  ', $nodeName, 'Impl.mpc&#xA;')"/>
	</xsl:template>
	 
	<!-- Project_Include_IDL -->
	<xsl:template name="Project_Include_IDL">
		<xsl:param name="node" />
		<xsl:param name="transformNodeKindKey" />
		<xsl:param name="transformNodeLabelKey" />
		
		<!-- Workspace_Project_Include -->
		<xsl:variable name="nodeName" select="./gml:data[@key=$transformNodeLabelKey]/text()" />
			<!-- may include path for idl files in future ??? -->
		<xsl:value-of select="concat('  ', $nodeName, '.mpc&#xA;')"/>
	</xsl:template>

	<!-- Project_Include_Param -->
	<xsl:template name="Project_Include_Param">
		<xsl:param name="node" />
		<xsl:param name="transformNodeKindKey" />
		<xsl:param name="transformNodeLabelKey" />
		
		<!-- Workspace_Project_Include -->
		<xsl:variable name="nodeName" select="./gml:data[@key=$transformNodeLabelKey]/text()" />
		<xsl:value-of select="concat('  ', $nodeName, 'Impl.mpc&#xA;')"/>
	</xsl:template>
	
	<!-- Split delimited list and output each item in order-->
	 <xsl:template name="splitListOutput">
		<xsl:param name="pText" />
		<xsl:param name="delim" />
		
		<xsl:if test="string-length($pText) > 0">
			<xsl:variable name="nodeName" select="substring-before(concat($pText, $delim), $delim)"/>
			<xsl:value-of select="concat('  ', $nodeName, '&#xA;')"/>						
			
			<xsl:call-template name="splitListOutput">
				<xsl:with-param name="pText" select="substring-after($pText, $delim)"/>
				<xsl:with-param name="delim" select="$delim" />
			</xsl:call-template> 

		</xsl:if>
	</xsl:template>
	
	<!-- find the key for specific attribute,  -->
	<xsl:template name="findNodeKey">
		<xsl:param name="attrName" />
		<xsl:param name="defaultId" />
		
		<xsl:variable name="found" select="/gml:graphml/gml:key[@attr.name=$attrName][@for='node']" />
		<xsl:choose>
			<xsl:when test="not($found)">
				<xsl:value-of select="$defaultId"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="$found/@id"/>
			</xsl:otherwise>
		</xsl:choose>
    </xsl:template>	
		
</xsl:stylesheet>